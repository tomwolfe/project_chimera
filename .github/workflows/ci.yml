# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # Cache pip dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Explicitly install Ruff and coverage for CI to ensure they are available and correct versions
        pip install ruff
        pip install pytest-cov

    - name: Run Ruff (Linter Check) - Fail on Violation
      # Ruff can act as both linter (flake8 replacement) and formatter (black replacement)
      # --output-format=github makes annotations appear directly in GitHub PRs
      # Ensure Ruff checks for formatting issues as well
      run: ruff check . --output-format=github --exit-non-zero-on-fix

    - name: Run Ruff (Formatter Validation) - Fail if not formatted
      # Enforce formatting and fail if not compliant
      run: ruff format --check --diff --exit-non-zero-on-fix

    - name: Run Bandit Security Scan
      # Configure Bandit to fail on high/medium severity issues
      # Use -c for config file; pyproject.toml is the standard location
      run: bandit -r . -ll -c pyproject.toml --exit-on-error
      # Bandit is configured to exit-on-error, which will fail the job if issues are found based on pyproject.toml settings.

      # Add a step to explicitly install Bandit if it's not covered by requirements.txt
      # This ensures the Bandit tool is available for the security scan.
      # Example: pip install bandit
      # If Bandit is already in requirements.txt, this step might be redundant but ensures availability.
      # Consider adding 'bandit' to requirements.txt if not already present.

    - name: Run Tests with Coverage
      # Ensure all tests pass and coverage meets the threshold
      # Run pytest and generate coverage report, enforcing the 80% threshold
      run: |
        pytest --cov=src \
               --cov-report=xml \
               --cov-report=term \
               --cov-fail-under=80
    # You could add more steps here, e.g., for deployment, etc.