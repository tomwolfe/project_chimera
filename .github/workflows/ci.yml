# .github/workflows/ci.yml
name: CI/CD Pipeline

on: [push, pull_request] # Corrected 'on:' syntax

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4 # Updated to v4 as suggested
      with: { python-version: '3.11' } # Corrected 'with:' syntax for single item

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Explicitly install Ruff and coverage for CI to ensure they are available and correct versions
        pip install ruff
        pip install pytest-cov

    - name: Run Ruff (Linter Check) - Fail on Violation
      # Ruff can act as both linter (flake8 replacement) and formatter (black replacement)
      # --output-format=github makes annotations appear directly in GitHub PRs
      # Ensure Ruff checks for formatting issues as well
      run: ruff check . --output-format=github --exit-non-zero-on-fix

    - name: Run Ruff (Formatter Validation) - Fail if not formatted
      # Enforce formatting and fail if not compliant
      run: ruff format --check --diff --exit-non-zero-on-fix

    - name: Run Bandit Security Scan
      # Configure Bandit to fail on high/medium severity issues
      # Use -c for config file; pyproject.toml is the standard location
      # Added --severity-level HIGH and --confidence-level B as per AI suggestion for stricter checks
      run: bandit -r . --config pyproject.toml --severity-level HIGH --confidence-level B --exit-on-error
      # Bandit is configured to exit-on-error, which will fail the job if issues are found based on pyproject.toml settings.

      # Add a step to explicitly install Bandit if it's not covered by requirements.txt
      # This ensures the Bandit tool is available for the security scan.
      # Example: pip install bandit
      # If Bandit is already in requirements.txt, this step might be redundant but ensures availability.
      # Consider adding 'bandit' to requirements.txt if not already present.

    - name: Run Tests with Coverage
      # Ensure all tests pass and coverage meets the threshold
      # Run pytest and generate coverage report, enforcing the 80% threshold
      run: |
        pytest tests/ --junitxml=report.xml # Added --junitxml for artifact upload
        # Run Integration Tests (if applicable)
        # pytest tests/integration/ --junitxml=report.xml
    
    - name: Upload Test Results # NEW: Step to upload test artifacts
      uses: actions/upload-artifact@v3
      with: { name: test-reports, path: ./**/*.xml }

    # You could add more steps here, e.g., for deployment, etc.