# pyproject.toml

[tool.pytest.ini_options]
pythonpath = ["."]

[tool.ruff]
line-length = 88
target-version = "py311" # Target Python 3.11 for modern syntax and features

[tool.ruff.lint]
# Select a comprehensive set of linting rules, including security (B)
select = ["E", "F", "W", "C90", "I", "N", "D", "UP", "ANN", "ASYNC", "B"] # Black compatibility

ignore = [
    "D100", # Allow missing module docstring
    "D104", # Allow missing module docstring (package)
    "D107", # Allow missing docstring in __init__
    "ANN101", # Allow missing type annotation for self
    "ANN002", # Allow missing type annotation for *args
    "ANN003", # Allow missing type annotation for **kwargs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.bandit]
# Configure Bandit to scan recursively, include low severity issues, and use this config file.
# Ensure all relevant security checks are enabled by default or explicitly configured.
# The CI workflow already uses these flags, ensuring consistency.
conf_file = "pyproject.toml"
# level = "info" # Equivalent to -ll, includes low severity issues - REMOVED: Redundant with CI workflow flags
# Use pyproject.toml as the configuration file.
# Set severity and confidence levels to catch critical issues.
# '-ll' includes low severity issues, which is good for comprehensive scanning.
severity_level = "MEDIUM" # Fail on Medium and High severity issues
confidence_level = "B" # Fail on B (Best) confidence level issues


# Add other configurations as needed, e.g., for MyPy, Pytest, etc.

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
fail_under = 80 # MODIFIED: Enforce minimum 80% coverage
show_missing = true
skip_covered = true